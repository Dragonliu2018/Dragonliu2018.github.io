<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-09-14T10:03:24.331Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Databend][pr] pivot 支持 subquery</title>
    <link href="http://example.com/2025/09/14/Databend-pr-pivot-%E6%94%AF%E6%8C%81-subquery/"/>
    <id>http://example.com/2025/09/14/Databend-pr-pivot-%E6%94%AF%E6%8C%81-subquery/</id>
    <published>2025-09-14T09:45:42.000Z</published>
    <updated>2025-09-14T10:03:24.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-任务背景"><a class="markdownIt-Anchor" href="#1-任务背景"></a> 1 任务背景</h1><ul><li><strong>Issue</strong>：<a href="https://github.com/databendlabs/databend/issues/16556">https://github.com/databendlabs/databend/issues/16556</a></li><li>**PR：**<a href="https://github.com/databendlabs/databend/pull/16631">https://github.com/databendlabs/databend/pull/16631</a></li></ul><h2 id="11-任务介绍"><a class="markdownIt-Anchor" href="#11-任务介绍"></a> 1.1 任务介绍</h2><p><strong>目前 databend 中的 pivot 和 unpivot 不支持 <code>FROM/IN + subquery</code></strong>。→ <a href="https://docs.databend.com/sql/sql-commands/query-syntax/query-pivot">文档链接</a></p><p><strong>要求实现类似于 snowflake 的语法，也就是让 pivot 支持 <code>FROM/IN + subquery</code>，unpivot 支持 <code>FROM + subquery</code></strong>。→ <a href="https://docs.snowflake.com/en/sql-reference/constructs/pivot">文档链接</a></p><ul><li><p><strong>databend PIVOT 语法</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line">   PIVOT ( <span class="operator">&lt;</span>aggregate_function<span class="operator">&gt;</span> ( <span class="operator">&lt;</span>pivot_column<span class="operator">&gt;</span> )</span><br><span class="line">            <span class="keyword">FOR</span> <span class="operator">&lt;</span>value_column<span class="operator">&gt;</span> <span class="keyword">IN</span> ( <span class="operator">&lt;</span>pivot_value_1<span class="operator">&gt;</span> [ , <span class="operator">&lt;</span>pivot_value_2<span class="operator">&gt;</span> ... ] ) )</span><br><span class="line"></span><br><span class="line">[ ... ]</span><br></pre></td></tr></table></figure><ul><li><code>&lt;aggregate_function&gt;</code>：用于组合来自<code>pivot_column</code>的分组值的聚合函数。</li><li><code>&lt;pivot_column&gt;</code>：将使用指定的<code>&lt;aggregate_function&gt;</code>进行聚合的列。</li><li><code>&lt;value_column&gt;</code>：其唯一值将在旋转结果集中成为新列的列。</li><li><code>&lt;pivot_value_N&gt;</code>：来自<code>&lt;value_column&gt;</code>的唯一值，将在旋转结果集中成为新列。</li></ul></li><li><p><strong>databend UNPIVOT 语法</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line">    UNPIVOT ( <span class="operator">&lt;</span>value_column<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">FOR</span> <span class="operator">&lt;</span>name_column<span class="operator">&gt;</span> <span class="keyword">IN</span> ( <span class="operator">&lt;</span>column_list<span class="operator">&gt;</span> ) )</span><br><span class="line"></span><br><span class="line">[ ... ]</span><br></pre></td></tr></table></figure><ul><li><code>&lt;value_column&gt;</code>：将存储从 <code>&lt;column_list&gt;</code> 中列出的列中提取的值的列。</li><li><code>&lt;name_column&gt;</code>：将存储从中提取值的列的名称的列。</li><li><code>&lt;column_list&gt;</code>：要取消透视的列的列表，用逗号分隔。</li></ul></li><li><p><strong>snowflake PIVOT 语法</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line">   PIVOT ( <span class="operator">&lt;</span>aggregate_function<span class="operator">&gt;</span> ( <span class="operator">&lt;</span>pivot_column<span class="operator">&gt;</span> )</span><br><span class="line">            <span class="keyword">FOR</span> <span class="operator">&lt;</span>value_column<span class="operator">&gt;</span> <span class="keyword">IN</span> (</span><br><span class="line">              <span class="operator">&lt;</span>pivot_value_1<span class="operator">&gt;</span> [ , <span class="operator">&lt;</span>pivot_value_2<span class="operator">&gt;</span> ... ]</span><br><span class="line">              <span class="operator">|</span> <span class="keyword">ANY</span> [ <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... ]</span><br><span class="line">              <span class="operator">|</span> <span class="operator">&lt;</span>subquery<span class="operator">&gt;</span></span><br><span class="line">            )</span><br><span class="line">            [ <span class="keyword">DEFAULT</span> <span class="keyword">ON</span> <span class="keyword">NULL</span> (<span class="operator">&lt;</span><span class="keyword">value</span><span class="operator">&gt;</span>) ]</span><br><span class="line">         )</span><br><span class="line"></span><br><span class="line">[ ... ]</span><br></pre></td></tr></table></figure></li><li><p><strong>snowflake UNPIVOT 语法</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line">    UNPIVOT [ &#123; INCLUDE <span class="operator">|</span> EXCLUDE &#125; NULLS ]</span><br><span class="line">      ( <span class="operator">&lt;</span>value_column<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">FOR</span> <span class="operator">&lt;</span>name_column<span class="operator">&gt;</span> <span class="keyword">IN</span> ( <span class="operator">&lt;</span>column_list<span class="operator">&gt;</span> ) )</span><br><span class="line"></span><br><span class="line">[ ... ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-介绍-pivot-unpivot"><a class="markdownIt-Anchor" href="#12-介绍-pivot-unpivot"></a> 1.2 介绍 pivot &amp; unpivot</h2><h3 id="121-pivot透视一列中的属性值转成多个对应属性"><a class="markdownIt-Anchor" href="#121-pivot透视一列中的属性值转成多个对应属性"></a> 1.2.1 <strong>pivot（透视，一列中的属性值转成多个对应属性）</strong></h3><blockquote><p><a href="https://docs.databend.com/sql/sql-commands/query-syntax/query-pivot">https://docs.databend.com/sql/sql-commands/query-syntax/query-pivot</a></p></blockquote><hr /><p><strong><code>PIVOT</code>操作通过旋转表格并基于指定列聚合结果来转换表格</strong>，这是一个对于总结和分析大量数据以更可读格式显示非常有用的操作。</p><hr /><ul><li><p><strong>databend PIVOT 语法</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line">   PIVOT ( <span class="operator">&lt;</span>aggregate_function<span class="operator">&gt;</span> ( <span class="operator">&lt;</span>pivot_column<span class="operator">&gt;</span> )</span><br><span class="line">            <span class="keyword">FOR</span> <span class="operator">&lt;</span>value_column<span class="operator">&gt;</span> <span class="keyword">IN</span> ( <span class="operator">&lt;</span>pivot_value_1<span class="operator">&gt;</span> [ , <span class="operator">&lt;</span>pivot_value_2<span class="operator">&gt;</span> ... ] ) )</span><br><span class="line"></span><br><span class="line">[ ... ]</span><br></pre></td></tr></table></figure><ul><li><code>&lt;aggregate_function&gt;</code>：用于组合来自<code>pivot_column</code>的分组值的聚合函数。</li><li><code>&lt;pivot_column&gt;</code>：将使用指定的<code>&lt;aggregate_function&gt;</code>进行聚合的列。</li><li><code>&lt;value_column&gt;</code>：其唯一值将在旋转结果集中成为新列的列。</li><li><code>&lt;pivot_value_N&gt;</code>：来自<code>&lt;value_column&gt;</code>的唯一值，将在旋转结果集中成为新列。</li></ul></li></ul><hr /><p>假设我们有一个名为 monthly_sales 的表，其中<strong>包含不同员工在不同月份的销售数据</strong>。我们<strong>可以使用<code>PIVOT</code>操作来总结数据并计算每个员工在每个月的总销售额</strong>。</p><ul><li><p><strong>创建和插入数据</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建monthly_sales表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> monthly_sales(</span><br><span class="line">  empid <span class="type">INT</span>,</span><br><span class="line">  amount <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">month</span> <span class="type">VARCHAR</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入销售数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> monthly_sales <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">10000</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">400</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">4500</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">35000</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">5000</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">3000</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">200</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">90500</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">6000</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">5000</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">2500</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">9500</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">8000</span>, <span class="string">&#x27;APR&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">10000</span>, <span class="string">&#x27;APR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">800</span>, <span class="string">&#x27;APR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">4500</span>, <span class="string">&#x27;APR&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 PIVOT</strong></p><p>现在，我们可以使用<code>PIVOT</code>操作来计算每个员工在每个月的总销售额。我们将使用<code>SUM</code>聚合函数来计算总销售额，<strong>MONTH 列将被旋转以为每个月创建新列。</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> monthly_sales</span><br><span class="line">PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="string">&#x27;JAN&#x27;</span>, <span class="string">&#x27;FEB&#x27;</span>, <span class="string">&#x27;MAR&#x27;</span>, <span class="string">&#x27;APR&#x27;</span>))</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID;</span><br></pre></td></tr></table></figure><p>输出：</p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span> empid <span class="operator">|</span> jan   <span class="operator">|</span> feb   <span class="operator">|</span> mar   <span class="operator">|</span> apr   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> <span class="number">10400</span> <span class="operator">|</span>  <span class="number">8000</span> <span class="operator">|</span> <span class="number">11000</span> <span class="operator">|</span> <span class="number">18000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> <span class="number">39500</span> <span class="operator">|</span> <span class="number">90700</span> <span class="operator">|</span> <span class="number">12000</span> <span class="operator">|</span>  <span class="number">5300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="122-unpivot取消透视多个属性转成一列中对应的属性值"><a class="markdownIt-Anchor" href="#122-unpivot取消透视多个属性转成一列中对应的属性值"></a> 1.2.2 <strong>unpivot（取消透视，多个属性转成一列中对应的属性值）</strong></h3><blockquote><p><a href="https://docs.databend.com/sql/sql-commands/query-syntax/query-unpivot">https://docs.databend.com/sql/sql-commands/query-syntax/query-unpivot</a></p></blockquote><hr /><p><code>UNPIVOT</code> 操作通过将列转换为行来旋转表。它是一个关系操作符，接受两列（来自表或子查询），以及列的列表，并为列表中指定的每列生成一行。在查询中，它在 FROM 子句中指定，位于表名或子查询之后。</p><hr /><ul><li><p><strong>databend UNPIVOT 语法</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line">    UNPIVOT ( <span class="operator">&lt;</span>value_column<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">FOR</span> <span class="operator">&lt;</span>name_column<span class="operator">&gt;</span> <span class="keyword">IN</span> ( <span class="operator">&lt;</span>column_list<span class="operator">&gt;</span> ) )</span><br><span class="line"></span><br><span class="line">[ ... ]</span><br></pre></td></tr></table></figure><ul><li><code>&lt;value_column&gt;</code>：将存储从 <code>&lt;column_list&gt;</code> 中列出的列中提取的值的列。</li><li><code>&lt;name_column&gt;</code>：将存储从中提取值的列的名称的列。</li><li><code>&lt;column_list&gt;</code>：要取消透视的列的列表，用逗号分隔。</li></ul></li></ul><hr /><p>让我们取消透视个别月份列，以返回每位员工每月的单一销售值：</p><ul><li><p><strong>创建和插入数据</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 unpivoted_monthly_sales 表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> unpivoted_monthly_sales(</span><br><span class="line">  empid <span class="type">INT</span>,</span><br><span class="line">  jan <span class="type">INT</span>,</span><br><span class="line">  feb <span class="type">INT</span>,</span><br><span class="line">  mar <span class="type">INT</span>,</span><br><span class="line">  apr <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入销售数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> unpivoted_monthly_sales <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">10400</span>,  <span class="number">8000</span>, <span class="number">11000</span>, <span class="number">18000</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">39500</span>, <span class="number">90700</span>, <span class="number">12000</span>,  <span class="number">5300</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 UNPIVOT</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> unpivoted_monthly_sales</span><br><span class="line">    UNPIVOT (amount</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">month</span> <span class="keyword">IN</span> (jan, feb, mar, apr));</span><br></pre></td></tr></table></figure><p>输出：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> empid <span class="operator">|</span> <span class="keyword">month</span> <span class="operator">|</span> amount <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> jan   <span class="operator">|</span>  <span class="number">10400</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> feb   <span class="operator">|</span>   <span class="number">8000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> mar   <span class="operator">|</span>  <span class="number">11000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> apr   <span class="operator">|</span>  <span class="number">18000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> jan   <span class="operator">|</span>  <span class="number">39500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> feb   <span class="operator">|</span>  <span class="number">90700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> mar   <span class="operator">|</span>  <span class="number">12000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> apr   <span class="operator">|</span>   <span class="number">5300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="2-设计参考竞品分析"><a class="markdownIt-Anchor" href="#2-设计参考竞品分析"></a> 2 设计参考（竞品分析）</h1><h1 id="3-思路与实现"><a class="markdownIt-Anchor" href="#3-思路与实现"></a> 3 思路与实现</h1><h2 id="31-思路"><a class="markdownIt-Anchor" href="#31-思路"></a> 3.1 思路</h2><p>实现 <code>from + subquery</code> 较为简单，在 TableReference::Subquery 加上 pivot 和 unpivot 字段，修改 parser 及其他相关地方。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">subquery</span> = <span class="title function_ invoke__">map</span>(</span><br><span class="line">    rule! &#123;</span><br><span class="line">        LATERAL? ~ <span class="string">&quot;(&quot;</span> ~ #query ~ <span class="string">&quot;)&quot;</span> ~ #table_alias? ~ #pivot? ~ #unpivot?</span><br><span class="line">    &#125;,</span><br><span class="line">    |(lateral, _, subquery, _, alias, pivot, unpivot)| TableReferenceElement::Subquery &#123;</span><br><span class="line">        lateral: lateral.<span class="title function_ invoke__">is_some</span>(),</span><br><span class="line">        subquery: <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(subquery),</span><br><span class="line">        alias,</span><br><span class="line">        pivot: pivot.<span class="title function_ invoke__">map</span>(<span class="type">Box</span>::new),</span><br><span class="line">        unpivot: unpivot.<span class="title function_ invoke__">map</span>(<span class="type">Box</span>::new),</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr /><p>实现 <code>in + subquery</code> 相对复杂，因为在 binder 的时候必须知道 column 的 name 才能生成逻辑计划，所以只能先执行一下这个 subquery ，然后把返回值当作 values 处理；但是执行 query/plan 是在 service 模块下，binder 是在 sql 模块，存在循环调用的问题。→ <a href="https://www.notion.so/125e3d1c52c6806ca52dedaa716ef5ae?pvs=21">解决循环依赖问题</a></p><p>解决思路有三种：</p><ol><li>【<strong>思路-1</strong>】在 pivot_rewrite 阶段（binder）执行 Subquery 得到答案，参考 QuerySampleExecutor 写个回调函数在 binder 里面调一下 service 的函数执行。<ol><li><p>Pivot 结构体新添 Subquery 字段（Query），用于存储 <code>in + subquery</code> 中的 subquery；</p><ul><li><p><strong>Pivot</strong></p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原版</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Pivot</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> aggregate: Expr,</span><br><span class="line">    <span class="keyword">pub</span> value_column: Identifier,</span><br><span class="line">    <span class="keyword">pub</span> values: <span class="type">Vec</span>&lt;Expr&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">PivotValues</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">ColumnValues</span>(<span class="type">Vec</span>&lt;Expr&gt;),</span><br><span class="line">    <span class="title function_ invoke__">Subquery</span>(<span class="type">Box</span>&lt;Query&gt;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Pivot</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> aggregate: Expr,</span><br><span class="line">    <span class="keyword">pub</span> value_column: Identifier,</span><br><span class="line">    <span class="keyword">pub</span> values: PivotValues,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 rewrite_pivot 函数中对 Subquery 进行 parser + rewrite + opt + exec 等操作，并将结果存在原来的 <code>values</code> 字段，后续操作一致。</p><ol><li>执行 query 的回调函数目前有基于 PhysicalPlan 的，一种方案是基于该函数进行操作；另一种方案是新添基于 Query String 执行的回调函数。</li></ol></li></ol></li><li>【<strong>思路-2</strong>】在发现 subquery 的时候返回，在 service 里面执行之后重写 sql，然后再次执行。</li><li>【<strong>思路-3</strong>】现在的 plan_sql 函数里面会执行 parser 并生成 plan，可以把这个函数拆成两个：<ol><li>第一个函数执行 parser，生成 stmt，同时进行一些 rewrite，如果这时发现有 subquery 的话，就先执行一下，然后 rewrite。</li><li>第二个函数传入 rewrite 之后的 stmt，生成 plan。</li></ol></li></ol><p>本着尽可能少的改动当前代码结构的原则，选择**【思路-1】**进行实现。</p><h2 id="32-review-相关修改"><a class="markdownIt-Anchor" href="#32-review-相关修改"></a> 3.2 review 相关修改</h2><ul><li><p>【<strong>review-1</strong>】避免不必要的 clone</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原版</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">value</span> = columns[<span class="number">0</span>].<span class="title function_ invoke__">to_column</span>(block.<span class="title function_ invoke__">num_rows</span>());</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> <span class="number">0</span>..block.<span class="title function_ invoke__">num_rows</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> columns[<span class="number">0</span>].value.<span class="title function_ invoke__">index</span>(row).<span class="title function_ invoke__">unwrap</span>() &#123;</span><br><span class="line">        ScalarRef::<span class="title function_ invoke__">String</span>(s) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">literal</span> = Expr::Literal &#123;</span><br><span class="line">                span,</span><br><span class="line">                value: Literal::<span class="title function_ invoke__">String</span>(s.<span class="title function_ invoke__">to_string</span>()),</span><br><span class="line">            &#125;;</span><br><span class="line">            values.<span class="title function_ invoke__">push</span>(literal);</span><br><span class="line">        &#125;</span><br><span class="line">        _ =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(ErrorCode::<span class="title function_ invoke__">SemanticError</span>(</span><br><span class="line">                <span class="string">&quot;The subquery of `pivot in` must return a string type&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">set_span</span>(span));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>【<strong>review-2</strong>】针对于 subquery 返回的每个 String 不需要设置 span，使用 subquery 的 span 即可。</p></li><li><p>【<strong>review-3</strong>】使用 <code>block.num_columns()</code> 计算 column 的数量。</p>  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原版</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">columns</span> = block.<span class="title function_ invoke__">columns</span>();</span><br><span class="line"><span class="keyword">if</span> columns.<span class="title function_ invoke__">len</span>() != <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">if</span> block.<span class="title function_ invoke__">num_columns</span>() != <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>【<strong>review-4</strong>】将 sample_executor 和 subquery_executor 合并成一个 query_executor，实现不同的函数用来做区分。</p></li><li><p>【<strong>review-5</strong>】对返回的 ErrorCode 设置 span。→ <a href="https://www.notion.so/span-123e3d1c52c68003850bf86ae43a4c3d?pvs=21">span</a></p><p>不使用 span：</p>  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(ErrorCode::<span class="title function_ invoke__">SemanticError</span>(</span><br><span class="line">    <span class="string">&quot;The subquery of `pivot in` must return one column&quot;</span>,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [dev]<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> monthly_sales) PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">month</span>, <span class="keyword">month</span> <span class="keyword">from</span> monthly_sales)) <span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID;</span><br><span class="line">ERROR <span class="number">1105</span> (HY000): SemanticError. Code: <span class="number">1065</span>, Text <span class="operator">=</span> The subquery <span class="keyword">of</span> `pivot <span class="keyword">in</span>` must <span class="keyword">return</span> <span class="keyword">one</span> column.</span><br></pre></td></tr></table></figure><hr /><p>使用 span：</p>  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(ErrorCode::<span class="title function_ invoke__">SemanticError</span>(</span><br><span class="line">    <span class="string">&quot;The subquery of `pivot in` must return one column&quot;</span>,</span><br><span class="line">)</span><br><span class="line">.<span class="title function_ invoke__">set_span</span>(span));</span><br></pre></td></tr></table></figure>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [dev]<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> monthly_sales) PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> empid <span class="keyword">from</span> monthly_sales)) <span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID;</span><br><span class="line">ERROR <span class="number">1105</span> (HY000): SemanticError. Code: <span class="number">1065</span>, Text <span class="operator">=</span> error: </span><br><span class="line">  <span class="comment">--&gt; SQL:1:78</span></span><br><span class="line">  <span class="operator">|</span></span><br><span class="line"><span class="number">1</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> monthly_sales) PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> empid <span class="keyword">from</span> monthly_sales)) <span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID</span><br><span class="line">  <span class="operator">|</span>                                                                              <span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span><span class="operator">^</span> The subquery <span class="keyword">of</span> `pivot <span class="keyword">in</span>` must <span class="keyword">return</span> a string type</span><br><span class="line"></span><br><span class="line">.</span><br></pre></td></tr></table></figure></li></ul><h2 id="33-bugs"><a class="markdownIt-Anchor" href="#33-bugs"></a> 3.3 bugs</h2><ul><li><p>【<strong>bug-1</strong>】因为需要两次用到 pivot 变量，所以会报 error: use of moved value 的错误。→ <a href="https://www.notion.so/error-use-of-moved-value-11fe3d1c52c68078839ae6d3f66d8f62?pvs=21">error: use of moved value</a></p><p>把 pivot 和 unpivot 挪出去，改成两个单独的函数。</p></li><li><p>【<strong>bug-2</strong>】rewrite_pivot 是非 async 函数，但是 subquery_executor.execute_query_with_sql_string 是 async 函数，rewrite_pivot 中需要调用 subquery_executor.execute_query_with_sql_string。所以会报错：<code>await</code> is only allowed inside <code>async</code> functions and blocks。→ <a href="https://www.notion.so/async-async-125e3d1c52c680008cb5e6a86c6a6554?pvs=21">在非 async 函数里调用 async 函数</a></p><p><code>databend_common_base::runtime::block_on</code></p></li></ul><h1 id="4-测试"><a class="markdownIt-Anchor" href="#4-测试"></a> 4 测试</h1><h2 id="41-功能测试"><a class="markdownIt-Anchor" href="#41-功能测试"></a> 4.1 功能测试</h2><p>与 snowflake 语法保持一致：</p><ul><li>pivot 支持三种 subquery，<code>from + subquery</code>、<code>in + subquery</code>、<code>from + subquery + in + subquery</code>。</li><li>unpivot 只支持 <code>from + subquery</code> 一种。</li></ul><h3 id="411-手动测试"><a class="markdownIt-Anchor" href="#411-手动测试"></a> 4.1.1 手动测试</h3><ul><li><p><strong>测试 Pivot</strong></p><ul><li><p><strong>Create the monthly_sales table</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> monthly_sales(</span><br><span class="line">  empid <span class="type">INT</span>, </span><br><span class="line">  amount <span class="type">INT</span>, </span><br><span class="line">  <span class="keyword">month</span> <span class="type">VARCHAR</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>Insert sales data</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> monthly_sales <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">10000</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">400</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">4500</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">35000</span>, <span class="string">&#x27;JAN&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">5000</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">3000</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">200</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">90500</span>, <span class="string">&#x27;FEB&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">6000</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">5000</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">2500</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">9500</span>, <span class="string">&#x27;MAR&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">8000</span>, <span class="string">&#x27;APR&#x27;</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="number">10000</span>, <span class="string">&#x27;APR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">800</span>, <span class="string">&#x27;APR&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">4500</span>, <span class="string">&#x27;APR&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>Pivot（原版）</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> monthly_sales</span><br><span class="line">PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="string">&#x27;JAN&#x27;</span>, <span class="string">&#x27;FEB&#x27;</span>, <span class="string">&#x27;MAR&#x27;</span>, <span class="string">&#x27;APR&#x27;</span>))</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID;</span><br></pre></td></tr></table></figure></li><li><p><strong>from + subquery</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> monthly_sales)</span><br><span class="line">PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="string">&#x27;JAN&#x27;</span>, <span class="string">&#x27;FEB&#x27;</span>, <span class="string">&#x27;MAR&#x27;</span>, <span class="string">&#x27;APR&#x27;</span>))</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID;</span><br></pre></td></tr></table></figure></li><li><p><strong>in + subquery</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> monthly_sales</span><br><span class="line">PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">month</span> <span class="keyword">from</span> monthly_sales))</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID;</span><br></pre></td></tr></table></figure></li><li><p><strong>from + in + subquery</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> monthly_sales)</span><br><span class="line">PIVOT(<span class="built_in">SUM</span>(amount) <span class="keyword">FOR</span> <span class="keyword">MONTH</span> <span class="keyword">IN</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">month</span> <span class="keyword">from</span> monthly_sales))</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> EMPID;</span><br></pre></td></tr></table></figure></li><li><p><strong>Answer</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span> empid <span class="operator">|</span> jan   <span class="operator">|</span> feb   <span class="operator">|</span> mar   <span class="operator">|</span> apr   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> <span class="number">10400</span> <span class="operator">|</span>  <span class="number">8000</span> <span class="operator">|</span> <span class="number">11000</span> <span class="operator">|</span> <span class="number">18000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> <span class="number">39500</span> <span class="operator">|</span> <span class="number">90700</span> <span class="operator">|</span> <span class="number">12000</span> <span class="operator">|</span>  <span class="number">5300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------+-------+-------+</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>测试 Unpivot</strong></p><ul><li><p><strong>Create the unpivoted_monthly_sales table</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> unpivoted_monthly_sales(</span><br><span class="line">  empid <span class="type">INT</span>,</span><br><span class="line">  jan <span class="type">INT</span>,</span><br><span class="line">  feb <span class="type">INT</span>,</span><br><span class="line">  mar <span class="type">INT</span>,</span><br><span class="line">  apr <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>Insert sales data</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> unpivoted_monthly_sales <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">10400</span>,  <span class="number">8000</span>, <span class="number">11000</span>, <span class="number">18000</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">39500</span>, <span class="number">90700</span>, <span class="number">12000</span>,  <span class="number">5300</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>unpivot（原版）</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> unpivoted_monthly_sales</span><br><span class="line">    UNPIVOT (amount</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">month</span> <span class="keyword">IN</span> (jan, feb, mar, apr));</span><br></pre></td></tr></table></figure></li><li><p><strong>from + subquery</strong></p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> monthly_sales_1)</span><br><span class="line">  UNPIVOT(sales <span class="keyword">FOR</span> <span class="keyword">month</span> <span class="keyword">IN</span> (jan, feb, mar, april))</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> empid</span><br></pre></td></tr></table></figure></li><li><p><strong>Answer</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> empid <span class="operator">|</span> <span class="keyword">month</span> <span class="operator">|</span> amount <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> jan   <span class="operator">|</span>  <span class="number">10400</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> feb   <span class="operator">|</span>   <span class="number">8000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> mar   <span class="operator">|</span>  <span class="number">11000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span> apr   <span class="operator">|</span>  <span class="number">18000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> jan   <span class="operator">|</span>  <span class="number">39500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> feb   <span class="operator">|</span>  <span class="number">90700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> mar   <span class="operator">|</span>  <span class="number">12000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span> apr   <span class="operator">|</span>   <span class="number">5300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="412-单元测试ast-相关"><a class="markdownIt-Anchor" href="#412-单元测试ast-相关"></a> 4.1.2 单元测试（ast 相关）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make unit-test</span><br></pre></td></tr></table></figure><p>parser 改了会导致之前的测试失败，修复下面两个文件：</p><ol><li><code>src/query/ast/tests/it/testdata/stmt.txt</code></li><li><code>src/query/ast/tests/it/testdata/query.txt</code></li></ol><hr /><p>另外在 test_query 函数加上一个 pivot &amp; unpivot 带 subquery 的测试用例，相关文件：<code>src/query/ast/tests/it/parser.rs</code>。</p><h3 id="413-逻辑测试sql-执行结果"><a class="markdownIt-Anchor" href="#413-逻辑测试sql-执行结果"></a> 4.1.3 逻辑测试（sql 执行结果）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make sqllogic-test</span><br></pre></td></tr></table></figure><p>为了加快测试速度，可以<strong>指定目录</strong>进行执行，甚至可以<strong>修改文件名</strong>使其在当前目录先执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./target/debug/databend-sqllogictests --handlers mysql --run_dir query</span><br></pre></td></tr></table></figure><hr /><p>添加 pivot &amp; unpivot 相关 sql 查询，相关文件：</p><ul><li><code>tests/sqllogictests/suites/query/pivot.test</code></li><li><code>tests/sqllogictests/suites/query/unpivot.test</code></li></ul><h2 id="42-性能测试"><a class="markdownIt-Anchor" href="#42-性能测试"></a> 4.2 性能测试</h2><h1 id="5-难点"><a class="markdownIt-Anchor" href="#5-难点"></a> 5 难点</h1><h1 id="6-todo"><a class="markdownIt-Anchor" href="#6-todo"></a> 6 TODO</h1><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://docs.snowflake.com/en/sql-reference/constructs/pivot">https://docs.snowflake.com/en/sql-reference/constructs/pivot</a></li><li><a href="https://docs.snowflake.com/en/sql-reference/constructs/unpivot">https://docs.snowflake.com/en/sql-reference/constructs/unpivot</a></li><li><a href="https://docs.databend.com/sql/sql-commands/query-syntax/query-pivot">https://docs.databend.com/sql/sql-commands/query-syntax/query-pivot</a></li><li><a href="https://docs.databend.com/sql/sql-commands/query-syntax/query-unpivot">https://docs.databend.com/sql/sql-commands/query-syntax/query-unpivot</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-任务背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-任务背景&quot;&gt;&lt;/a&gt; 1 任务背景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Issue&lt;/strong&gt;：&lt;a href=&quot;https://github.com/dat</summary>
      
    
    
    
    <category term="Databend" scheme="http://example.com/categories/Databend/"/>
    
    <category term="pr" scheme="http://example.com/categories/Databend/pr/"/>
    
    <category term="执行器" scheme="http://example.com/categories/Databend/%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
    
    <category term="表达式" scheme="http://example.com/categories/Databend/%E6%89%A7%E8%A1%8C%E5%99%A8/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="DB" scheme="http://example.com/categories/DB/"/>
    
    <category term="执行器" scheme="http://example.com/categories/DB/%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
    
    <category term="表达式" scheme="http://example.com/categories/DB/%E6%89%A7%E8%A1%8C%E5%99%A8/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="pr" scheme="http://example.com/tags/pr/"/>
    
  </entry>
  
  <entry>
    <title>[Doris][pr] Implement format methods for Status</title>
    <link href="http://example.com/2025/09/14/Doris-pr-Implement-format-methods-for-Status/"/>
    <id>http://example.com/2025/09/14/Doris-pr-Implement-format-methods-for-Status/</id>
    <published>2025-09-14T09:26:44.000Z</published>
    <updated>2025-09-14T09:36:34.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-issue-介绍"><a class="markdownIt-Anchor" href="#1-issue-介绍"></a> 1 issue 介绍</h1><p>当前 <code>Status</code> 类型进行 format 时，需要调用 <code>to_string</code> 函数：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fmt::format(<span class="string">&quot;&#123;&#125;&quot;</span>, status.<span class="built_in">to_string</span>());</span><br></pre></td></tr></table></figure><p>想要的效果是只需要传入 Status 类型即可：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fmt::format(<span class="string">&quot;&#123;&#125;&quot;</span>, status);</span><br></pre></td></tr></table></figure><h1 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2 实现</h1><h2 id="21-解析"><a class="markdownIt-Anchor" href="#21-解析"></a> 2.1 解析</h2><p><code>fmt</code> 库提供了一个类模板 <code>fmt::formatter</code>，通过模板特化为 <code>Status</code> 类型提供适当的格式化方式。</p><p>然后实现 <code>parse</code> 和 <code>format</code> 函数即可：</p><ul><li><strong><code>parse</code></strong> 函数负责解析格式字符串。在通常情况下，用户可能不需要提供自己的 <strong><code>parse</code></strong> 函数，而可以使用 fmt 默认提供的版本，该版本简单地返回解析上下文的开始迭代器。</li><li><strong><code>format</code></strong> 函数是用户必须提供的关键成员函数。它定义了如何将自定义类型格式化为字符串。</li></ul><h2 id="22-功能代码"><a class="markdownIt-Anchor" href="#22-功能代码"></a> 2.2 功能代码</h2><blockquote><p>👉 **参考：**<a href="https://wgml.pl/blog/formatting-user-defined-types-fmt.html">https://wgml.pl/blog/formatting-user-defined-types-fmt.html</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// specify formatter for Status</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fmt</span>::formatter&lt;doris::Status&gt; &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> ParseContext&gt;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">auto</span> <span class="title">parse</span><span class="params">(ParseContext&amp; ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> FormatContext&gt;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">format</span><span class="params">(doris::Status <span class="type">const</span>&amp; status, FormatContext&amp; ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fmt::format_to(ctx.<span class="built_in">out</span>(), <span class="string">&quot;&#123;&#125;&quot;</span>, status.<span class="built_in">to_string</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="23-测试代码"><a class="markdownIt-Anchor" href="#23-测试代码"></a> 2.3 测试代码</h2><p>实现完成后，编写测试样例，这里需要注意覆盖率。</p><p>reviewer 提出的建议是：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">please add <span class="number">3</span> tests：</span><br><span class="line"><span class="number">1.</span> status == ok</span><br><span class="line"><span class="number">2.</span> status == error &amp;&amp; has stacktrace</span><br><span class="line"><span class="number">3.</span> status == error &amp;&amp; <span class="keyword">do</span> <span class="keyword">not</span> have stacktrace</span><br></pre></td></tr></table></figure><h1 id="3-问题"><a class="markdownIt-Anchor" href="#3-问题"></a> 3 问题</h1><h2 id="31-ld-symbols-not-found-for-architecture-x86_64"><a class="markdownIt-Anchor" href="#31-ld-symbols-not-found-for-architecture-x86_64"></a> 3.1 ld: symbol(s) not found for architecture x86_64</h2><p>在本地 macos 上尝试写了个测试程序，但是发生下面的报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  test-reset git:(main) ✗ g++ test.cpp -std=c++20 -o <span class="built_in">test</span></span><br><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">&quot;void fmt::v10::detail::vformat_to&lt;char&gt;(fmt::v10::detail::buffer&lt;char&gt;&amp;, fmt::v10::basic_string_view&lt;char&gt;, fmt::v10::detail::vformat_args&lt;char&gt;::type, fmt::v10::detail::locale_ref)&quot;</span>, referenced from:</span><br><span class="line">      <span class="built_in">fmt</span>::v10::appender <span class="built_in">fmt</span>::v10::vformat_to&lt;<span class="built_in">fmt</span>::v10::appender, 0&gt;(<span class="built_in">fmt</span>::v10::appender, <span class="built_in">fmt</span>::v10::basic_string_view&lt;char&gt;, <span class="built_in">fmt</span>::v10::basic_format_args&lt;<span class="built_in">fmt</span>::v10::basic_format_context&lt;<span class="built_in">fmt</span>::v10::appender, char&gt; &gt;) <span class="keyword">in</span> test-878b3f.o</span><br><span class="line">  <span class="string">&quot;fmt::v10::detail::assert_fail(char const*, int, char const*)&quot;</span>, referenced from:</span><br><span class="line">      std::__1::make_unsigned&lt;long&gt;::<span class="built_in">type</span> <span class="built_in">fmt</span>::v10::detail::to_unsigned&lt;long&gt;(long) <span class="keyword">in</span> test-878b3f.o</span><br><span class="line">  <span class="string">&quot;fmt::v10::vprint(fmt::v10::basic_string_view&lt;char&gt;, fmt::v10::basic_format_args&lt;fmt::v10::basic_format_context&lt;fmt::v10::appender, char&gt; &gt;)&quot;</span>, referenced from:</span><br><span class="line">      _main <span class="keyword">in</span> test-878b3f.o</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">clang: error: linker <span class="built_in">command</span> failed with <span class="built_in">exit</span> code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：原因是未链接 fmt 库文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ test.cpp -std=c++20 -o <span class="built_in">test</span> -lfmt</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://stackoverflow.com/questions/56608684/how-to-use-the-fmt-library-without-getting-undefined-symbols-for-architecture-x">https://stackoverflow.com/questions/56608684/how-to-use-the-fmt-library-without-getting-undefined-symbols-for-architecture-x</a></p><h2 id="32-fmtformatter-模板特化代码不能在-doris-的-namespace"><a class="markdownIt-Anchor" href="#32-fmtformatter-模板特化代码不能在-doris-的-namespace"></a> 3.2 <code>fmt::formatter</code> 模板特化代码不能在 doris 的 namespace</h2><p>开始将特化代码放在了 doris namespace 中，发生了下面的报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Class template specialization of <span class="string">&#x27;formatter&#x27;</span> not <span class="keyword">in</span> a namespace enclosing <span class="string">&#x27;v8&#x27;</span> is a Microsoft extension clang(-Wmicrosoft-template)</span><br><span class="line"></span><br><span class="line">[core.h(707, 8): ] Explicitly specialized declaration is here</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> doris &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// doris code</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// end doris_namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define formatter here</span></span><br></pre></td></tr></table></figure><p>**参考：**<a href="https://github.com/fmtlib/fmt/issues/2767">https://github.com/fmtlib/fmt/issues/2767</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-issue-介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-issue-介绍&quot;&gt;&lt;/a&gt; 1 issue 介绍&lt;/h1&gt;
&lt;p&gt;当前 &lt;code&gt;Status&lt;/code&gt; 类型进行 format 时，需要调用 &lt;code&gt;</summary>
      
    
    
    
    <category term="Doris" scheme="http://example.com/categories/Doris/"/>
    
    <category term="其他" scheme="http://example.com/categories/Doris/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="pr" scheme="http://example.com/tags/pr/"/>
    
  </entry>
  
  <entry>
    <title>[Tool] Hexo 使用教程</title>
    <link href="http://example.com/2025/09/13/Tool-Hexo-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2025/09/13/Tool-Hexo-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2025-09-13T15:37:08.000Z</published>
    <updated>2025-09-14T09:11:16.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h1><h1 id="本地运行-hexo"><a class="markdownIt-Anchor" href="#本地运行-hexo"></a> 本地运行 Hexo</h1><h1 id="部署-github"><a class="markdownIt-Anchor" href="#部署-github"></a> 部署 Github</h1><blockquote><p>参考：<a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></p></blockquote><ol><li>安装 hexo-deployer-git</li></ol>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>修改项目根目录 blog 下的 <code>_config.yml</code></li></ol>  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/dragonliu2018/dragonliu2018.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h1 id="todo"><a class="markdownIt-Anchor" href="#todo"></a> TODO</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境准备&quot;&gt;&lt;/a&gt; 环境准备&lt;/h1&gt;
&lt;h1 id=&quot;本地运行-hexo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#本地运行-hexo&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Tool" scheme="http://example.com/categories/Tool/"/>
    
    <category term="Hexo" scheme="http://example.com/categories/Tool/Hexo/"/>
    
    
  </entry>
  
</feed>
